name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10.15.0'
  SERVER_IP: '207.180.197.168'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      root: ${{ steps.changes.outputs.root }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'packages/backend/**'
            frontend:
              - 'packages/frontend/**'
            root:
              - 'package.json'
              - 'pnpm-workspace.yaml'
              - 'pnpm-lock.yaml'
              - '.github/workflows/**'
              - 'scripts/**'


  lint-and-test:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend == 'true' || needs.detect-changes.outputs.frontend == 'true' || needs.detect-changes.outputs.root == 'true'
    
    strategy:
      matrix:
        package: [backend, frontend]
        
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        run: npm install -g pnpm@${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile --prefer-offline
          pnpm approve-builds
        env:
          NPM_CONFIG_REGISTRY: https://registry.npmjs.org/
          PNPM_CONFIG_REGISTRY: https://registry.npmjs.org/

      - name: Lint ${{ matrix.package }}
        if: (matrix.package == 'backend' && needs.detect-changes.outputs.backend == 'true') || (matrix.package == 'frontend' && needs.detect-changes.outputs.frontend == 'true')
        run: pnpm --filter ${{ matrix.package }} lint

      - name: Test ${{ matrix.package }}
        if: matrix.package == 'backend' && needs.detect-changes.outputs.backend == 'true'
        run: pnpm --filter ${{ matrix.package }} test

      - name: Test ${{ matrix.package }}
        if: matrix.package == 'frontend' && needs.detect-changes.outputs.frontend == 'true'
        run: pnpm --filter ${{ matrix.package }} test:run
        env:
          NODE_ENV: test

  build:
    runs-on: ubuntu-latest
    needs: [detect-changes, lint-and-test]
    if: needs.detect-changes.outputs.backend == 'true' || needs.detect-changes.outputs.frontend == 'true'
    
    strategy:
      matrix:
        package: [backend, frontend]
        
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        run: npm install -g pnpm@${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile --prefer-offline
          pnpm approve-builds
        env:
          NPM_CONFIG_REGISTRY: https://registry.npmjs.org/
          PNPM_CONFIG_REGISTRY: https://registry.npmjs.org/

      - name: Build ${{ matrix.package }}
        if: (matrix.package == 'backend' && needs.detect-changes.outputs.backend == 'true') || (matrix.package == 'frontend' && needs.detect-changes.outputs.frontend == 'true')
        run: pnpm --filter ${{ matrix.package }} build

      - name: Upload build artifacts
        if: (matrix.package == 'backend' && needs.detect-changes.outputs.backend == 'true') || (matrix.package == 'frontend' && needs.detect-changes.outputs.frontend == 'true')
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.package }}-build-${{ github.sha }}
          path: packages/${{ matrix.package }}/dist
          retention-days: 7

  deploy:
    runs-on: ubuntu-latest
    needs: [detect-changes, build]
    if: github.ref == 'refs/heads/main' && (needs.detect-changes.outputs.backend == 'true' || needs.detect-changes.outputs.frontend == 'true')
    
    environment:
      name: production
      url: http://${{ env.SERVER_IP }}

    steps:
      - uses: actions/checkout@v4

      - name: Check SSH secret
        run: |
          if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            echo "SSH_PRIVATE_KEY secret not found. Skipping deployment."
            echo "To enable deployment, add SSH_PRIVATE_KEY to repository secrets."
            exit 1
          fi

      - name: Download backend artifacts
        if: needs.detect-changes.outputs.backend == 'true'
        uses: actions/download-artifact@v4
        with:
          name: backend-build-${{ github.sha }}
          path: packages/backend/dist

      - name: Download frontend artifacts
        if: needs.detect-changes.outputs.frontend == 'true'
        uses: actions/download-artifact@v4
        with:
          name: frontend-build-${{ github.sha }}
          path: packages/frontend/dist

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          ssh-keyscan -H ${{ env.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        run: |
          # Create deployment directory
          ssh root@${{ env.SERVER_IP }} "mkdir -p /opt/employee-management/current"
          
          # Copy source code and built artifacts
          rsync -avz --delete \
            --exclude node_modules \
            --exclude .git \
            --exclude .env \
            . root@${{ env.SERVER_IP }}:/opt/employee-management/current/
          
          # Run deployment script
          ssh root@${{ env.SERVER_IP }} "cd /opt/employee-management/current && SERVER_IP=${{ env.SERVER_IP }} ./scripts/deploy.sh"

      - name: Health check
        run: |
          sleep 30
          curl -f http://${{ env.SERVER_IP }}/api/health || exit 1
          curl -f http://${{ env.SERVER_IP }} || exit 1

  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    steps:
      - name: Notify deployment status
        if: needs.deploy.result == 'success'
        run: |
          echo "Deployment successful to http://${{ env.SERVER_IP }}"

      - name: Notify deployment failure
        if: needs.deploy.result == 'failure'
        run: |
          echo "Deployment failed"
          exit 1